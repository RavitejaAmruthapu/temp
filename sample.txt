
#!/usr/bin/python

# Auto Udeploy script
# This script auto deploys the component to the configured environment
# Python 2.6.6
# Platform Independent - Tested Win/Linux x64 x86 Multi Arch
# Author : Sudheej Sudhakaran
# Contriutions to smpt code : Mastanrao Nampalli
# Version : 1.2



import urllib2
import json
import base64
import sys
import time
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
from datetime import datetime
from optparse import OptionParser


asciiart = """


     _         _                                          
    / \  _   _| |_ ___                                    
   / _ \| | | | __/ _ \                                   
  / ___ \ |_| | || (_) |                                  
 /_/__ \_\__,_|\__\___/                               _   
 |  _ \  ___ _ __ | | ___  _   _ _ __ ___   ___ _ __ | |_ 
 | | | |/ _ \ '_ \| |/ _ \| | | | '_ ` _ \ / _ \ '_ \| __|
 | |_| |  __/ |_) | | (_) | |_| | | | | | |  __/ | | | |_ 
 |____/ \___| .__/|_|\___/ \__, |_| |_| |_|\___|_| |_|\__|
            |_|            |___/                          
                                                                                       

"""

print '\033[95m' + asciiart
print "##teamcity[progressStart 'Automated Deployment (uDeploy)..']"


parser = OptionParser(usage="usage: %prog <build_type_id> <username> <password> [options]",
                          version="%prog 1.0")

# Users can utlize the optional parameter -p or --prod to switch to production validation

parser.add_option( '--app',
                    action='store_true',
                    dest='app',
                    default=False,
                    help='Validation docker builds and udeploy promotion for production environment')    

parser.add_option( '--ejb',
                    action='store_true',
                    dest='ejb',
                    default=False,
                    help='Validation docker builds and udeploy promotion for production environment')

parser.add_option( '--sch',
                    action='store_true',
                    dest='sch',
                    default=False,
                    help='Validation docker builds and udeploy promotion for production environment')

parser.add_option( '--fp',
                    action='store_true',
                    dest='fp',
                    default=False,
                    help='Validation docker builds and udeploy promotion for production environment')

parser.add_option( '--db',
                    action='store_true',
                    dest='db',
                    default=False,
                    help='Validation docker builds and udeploy promotion for production environment')

(options,args) = parser.parse_args()

def convertSpaceto20(appname):
    retval = appname.replace(" ", "%20")
    #print retval
    return retval

def printBad(details):
    print '\033[31m' + str(time.strftime("%Y-%m-%d %H:%M:%S")) + " ERROR " + " : " + details

def printOK(details):
    print '\033[94m' + str(time.strftime("%Y-%m-%d %H:%M:%S")) + " INFO " + " : " + details

def printSuccess(details):
    print '\033[32m' + str(time.strftime("%Y-%m-%d %H:%M:%S")) + " SUCCESS " + " : " + details
    print "##teamcity[progressFinish 'Completed Deployment..']"

def replace_all(text, dic):
    for i, j in dic.iteritems():
        text = text.replace(i, j)
    return text

print options.app
print options.ejb
print options.sch
print options.fp
print options.db
epass = base64.b64encode("PasswordIsAuthToken:" + sys.argv[5])
applicationName =  sys.argv[1]
applicationProcessName = sys.argv[2]
environmentName = sys.argv[3]
version = sys.argv[6]
componentname = sys.argv[7]
changenumber = sys.argv[8]
recipient = sys.argv[9]
recipient = recipient.split(' ')

def dynamictemplateUpdate(templatecontent,receipient, sender, date, subject, application, environment, version, status):
    # Templates place holders in email
    # $$Recipeint,$$Sender,$$Date,$$Subject,$$application,$$environment,$$version,$$status
    d = { 
        "$$Recipeint": receipient,
        "$$Sender": sender,
        "$$Date": date,
        "$$Subject": subject,
        "$$application": application,
        "$$environment": environment,
        "$$version": version,
        "$$status": status,

        }    
    return replace_all(templatecontent,d)

def emailNotification(receipient, application, component, environment, version, status,state):
    sender='dl.cts.global.build.integration.support@imcnam.ssmb.com'
    attachment='fpo_message_header.gif'
    receiver=receipient
    print receiver
    subject= state + ":" + environment + " deployment for " + application + " ("+ component + ")"
    datenow = datetime.now().strftime("%Y-%m-%d")

    msg = MIMEMultipart('related')
    msg['Subject'] = subject
    msg['From'] = sender
    msg['To'] = ", ".join(receiver)
    msg['Cc'] = sender
    msg.preamble = 'Build Notification from Teamcity.'
    msgAlternative = MIMEMultipart('alternative')

    with open('etemplate.html', 'r') as myfile:
        template=myfile.read()
    html_S = dynamictemplateUpdate(template,application + " stake holders ","TTS Build Integration",datenow,subject,application,environment,version,status)
    msg.attach(msgAlternative)
    mimeTr = MIMEText(html_S,'html')
    msgAlternative.attach(mimeTr)
    
    fp = open(attachment, 'rb')                                                    
    img = MIMEImage(fp.read())
    fp.close()
    img.add_header('Content-ID', '<image1>')
    msg.attach(img)

    s = smtplib.SMTP('mailhub-vip.nj.ssmb.com',25)
    # sendmail function takes 3 arguments: sender's address, recipient's address
    # and message to send - here it is sent as one string.
    s.sendmail(sender, receiver, msg.as_string())
    s.quit()

def prepare_json(applicationName,applicationProcessName,environmentName,version,componentname,changenumber,recipient,props):
     json_data= {"environment":  environmentName,"onlyChanged":  "false","applicationProcess":  applicationProcessName,"versions":  [{"version":  version,"component":  componentname}],"application":  applicationName,"properties": {"Change_Number":  changenumber}}
     #data_set = json.loads(json_data)
     for x, y in props.items():
          #print x+" : "+y
          json_data["properties"].setdefault(x,y)
          #print json_data["properties"][x]
     return json_data

def deploymentRequest(json_data):
     reqUrl = "https://releasedeployment3.ti.citigroup.net:8443/cli/applicationProcessRequest/request"
     opener = urllib2.build_opener(urllib2.HTTPHandler)
     print json.dumps(json_data)
     req = urllib2.Request(reqUrl,json.dumps(json_data))
     req.add_header('Authorization', 'Basic '+epass)
     req.get_method = lambda: 'PUT'
     resp = opener.open(req)
     return resp

def deploymentStatus(json_data):
     resp = deploymentRequest(json_data)
     opener = urllib2.build_opener(urllib2.HTTPHandler)
     printOK("Placed request to UDeploy to proceed with Deployment..")
     json1 = json.loads(resp.read())
     #print json1
     datadict = json1['requestId']
     print "uDeploy Request ID: "+ datadict

     #Lets check the status of Deployment
     responseURL = "https://releasedeployment3.ti.citigroup.net:8443/cli/applicationProcessRequest/requestStatus?request=" + datadict
     statusupdate = "Processing"
     counter = 0
     sys.stdout.flush()
     while statusupdate is "Processing":
         sys.stdout.flush()
         counter += 1
         Xresponse = urllib2.Request(responseURL)
         Xresponse.add_header('Authorization', 'Basic '+epass)
         Xresponse.get_method = lambda: 'GET'
         resp = opener.open(Xresponse)
         #json = json.loads(resp.read())
         #print json
         #retunval = json['status'] + " :: " + json['status']  
         retunval = resp.read()
            
         if "CLOSED" in retunval and "SUCCEEDED" in retunval:
             statusupdate = "Success"	
             printSuccess("Udeploy process is completed .." + statusupdate)
             return True
        
         if "FAILED" in retunval or "FAULTED" in retunval:
             statusupdate = "failed"	
             printBad("Udeploy process is  FAULTED :: .." + statusupdate)
             return False
        
         time.sleep(40) 
         printOK (statusupdate + " Please wait .. elapsed " + str(counter*10) + " secs ..")
         print "##teamcity[progressMessage 'Performing Deployment..']"
        
        
         if counter > 300:
             statusupdate = "timeout"
             printBad("Udeploy process is  taking longer time to execute :: .." + statusupdate)
             return False  

def getEnvrionmentID(applicationName,epass,lookupEnv):
    requestUrl = "https://releasedeployment3.ti.citigroup.net:8443/cli/application/environmentsInApplication?application="+applicationName
    printOK("Searching for available enviornments for the given application .. ")
    response = urllib2.Request(requestUrl)
    response.add_header('Authorization','Basic '+epass)
    response.get_method = lambda: 'GET'
    opener = urllib2.build_opener(urllib2.HTTPHandler)
    apiresponse = opener.open(response)
    responsearray = json.loads(apiresponse.read())
    for item in responsearray:
        if item['name'] == lookupEnv:
            return item['id']
            break
    return False

def statusEnvironmentID():
    EnviornmentID = getEnvrionmentID(convertSpaceto20(applicationName),epass,environmentName)
    if EnviornmentID:
         printOK("Found Environment with ID : " + EnviornmentID)
    else:
         printBad("Unable to find the Specified environment in provided Application")
         exit(1)
    return EnviornmentID

def getLatestVersionDeployed(environmentId,componentName,epass):
    printOK("Searching for Latest Deployed Versions for " + componentName + " in " + environmentId)
    requestUrl = "https://releasedeployment3.ti.citigroup.net:8443/rest/deploy/environment/" + environmentId + "/latestDesiredInventory/true?rowsPerPage=10000&pageNumber=1&orderField=name&sortType=desc"
    response = urllib2.Request(requestUrl)
    response.add_header('Authorization','Basic '+epass)
    response.get_method = lambda: 'GET'
    opener = urllib2.build_opener(urllib2.HTTPHandler)
    printOK("Please wait..")
    apiresponse = opener.open(response)
    responsearray = json.loads(apiresponse.read())
    printOK("Response received from uDeploy")
    for item in responsearray:
        if item['component']['name'] == componentName:
            return item['version']['name']
            break
    return False

def statusRollBackVersion(EnviornmentID):
    RollBackVersion = getLatestVersionDeployed(EnviornmentID,componentname,epass)
    if RollBackVersion:
         printOK("Found a Rollback version to revert in an event of Deployment Failure : " + RollBackVersion)
         return RollBackVersion
    else:
         printBad("Unable to find a Rollback version. This could first be time deployment. Rollback will not be attempted in an event of failure")

def deploymentRollBack(RollBackVersion, props):
     json_data = prepare_json(applicationName,applicationProcessName,environmentName,RollBackVersion,componentname,changenumber,recipient,props)
     print json_data
     RollBackStatus = deploymentStatus(json_data)     
     if RollBackStatus:
          printOK("Rollback was successful.. Application rolled back to version : " + RollBackVersion)
          printBad("Process would still fail :( because an attempt to deploy the version did not work.. and we had to rollback the application")
          emailNotification(recipient,applicationName,componentname,environmentName,version,"<table style='background-color:#f44336; color:white; font-family: Arial;'><th>Deployment failed - Teamcity rolled back the application to " + RollBackVersion + " version </th></table>", "FAILED")
          exit(1)
     else:
          printBad("Rollback deployment failed.. Will not attempt to rollback again ..")
          emailNotification(recipient,applicationName,componentname,environmentName,version,"<table style='background-color:#f44336; color:white; font-family: Arial;'><th>Deployment failed - Rollback attempted but Failed</th></table>","FAILED")
          exit(1)

#Lets trigger the application deployment
if (options.app):
     #print len(sys.argv)
     printOK("Proceeding with the application deployment.. ")
     if not len(sys.argv) == 13:
          print 'usage: script <applicationName> <applicationProcessName> <environmentName> <username> <password> <version> <componentname> <changenumber> <recipient> <install applications> <install stagename> --app'
          print "please pass needed parameter values to do application deployment"
          exit(1)
     
     props = { "Install: \""+componentname+"\"/applications":  sys.argv[10],
            "Install: \""+componentname+"\"/stage":  sys.argv[11]
          }
     json_data = prepare_json(applicationName,applicationProcessName,environmentName,version,componentname,changenumber,recipient,props)
     #print json_data
     EnviornmentID = statusEnvironmentID()
     RollBackVersion = statusRollBackVersion(EnviornmentID)
     DeploymentStatus = deploymentStatus(json_data)
     if DeploymentStatus:
          printSuccess("Deployment successfully completed.. ")
          emailNotification(recipient,applicationName,componentname,environmentName,version,"<table style='background-color:#4CAF50; color:white; font-family: Arial;'><th>Successful Deployment</th></table>","SUCCESS")
          exit(0)
     else:
          printBad("Deployment failed..")
          printOK("Attempting to see if application can be rolled back..")
          if RollBackVersion:
               RollBackStatus = deploymentRollBack(RollBackVersion, props)
          else:
               printBad ("Sorry there is no rollback version available in uDeploy for this component and environment")
               emailNotification(recipient,applicationName,componentname,environmentName,version,"<table style='background-color:#f44336; color:white; font-family: Arial;'><th>Deployment failed - No Rollback version available</th></table>","FAILED")
               exit(1)

#Lets trigger the ejb deployment
if (options.ejb):
     #print len(sys.argv)
     printOK("Proceeding with the ejb deployment.. ")
     if not len(sys.argv) == 13:
          print 'usage: script <applicationName> <applicationProcessName> <environmentName> <username> <password> <version> <componentname> <changenumber> <recipient> <install applications> <install stagename> --app'
          print "please pass needed parameter values to do application deployment"
          exit(1)
     
     props = { "Install: \""+componentname+"\"/applications":  sys.argv[10],
            "Install: \""+componentname+"\"/stage":  sys.argv[11]
          }
     json_data = prepare_json(applicationName,applicationProcessName,environmentName,version,componentname,changenumber,recipient,props)
     #print json_data
     EnviornmentID = statusEnvironmentID()
     RollBackVersion = statusRollBackVersion(EnviornmentID)
     DeploymentStatus = deploymentStatus(json_data)
     if DeploymentStatus:
          printSuccess("Deployment successfully completed.. ")
          emailNotification(recipient,applicationName,componentname,environmentName,version,"<table style='background-color:#4CAF50; color:white; font-family: Arial;'><th>Successful Deployment</th></table>","SUCCESS")
          exit(0)
     else:
          printBad("Deployment failed..")
          printOK("Attempting to see if application can be rolled back..")
          if RollBackVersion:
               RollBackStatus = deploymentRollBack(RollBackVersion, props)
          else:
               printBad ("Sorry there is no rollback version available in uDeploy for this component and environment")
               emailNotification(recipient,applicationName,componentname,environmentName,version,"<table style='background-color:#f44336; color:white; font-family: Arial;'><th>Deployment failed - No Rollback version available</th></table>","FAILED")
               exit(1)

#Lets trigger the Scheduler deployment
if (options.sch):
     #print len(sys.argv)
     printOK("Proceeding with the Scheduler deployment.. ")
     if not len(sys.argv) == 13:
          print 'usage: script <applicationName> <applicationProcessName> <environmentName> <username> <password> <version> <componentname> <changenumber> <recipient> <install applications> <install stagename> --app'
          print "please pass needed parameter values to do application deployment"
          exit(1)
     
     props = { "Install: \""+componentname+"\"/applications":  sys.argv[10],
            "Install: \""+componentname+"\"/stage":  sys.argv[11]
          }
     json_data = prepare_json(applicationName,applicationProcessName,environmentName,version,componentname,changenumber,recipient,props)
     #print json_data
     EnviornmentID = statusEnvironmentID()
     RollBackVersion = statusRollBackVersion(EnviornmentID)
     DeploymentStatus = deploymentStatus(json_data)
     if DeploymentStatus:
          printSuccess("Deployment successfully completed.. ")
          emailNotification(recipient,applicationName,componentname,environmentName,version,"<table style='background-color:#4CAF50; color:white; font-family: Arial;'><th>Successful Deployment</th></table>","SUCCESS")
          exit(0)
     else:
          printBad("Deployment failed..")
          printOK("Attempting to see if application can be rolled back..")
          if RollBackVersion:
               RollBackStatus = deploymentRollBack(RollBackVersion, props)
          else:
               printBad ("Sorry there is no rollback version available in uDeploy for this component and environment")
               emailNotification(recipient,applicationName,componentname,environmentName,version,"<table style='background-color:#f44336; color:white; font-family: Arial;'><th>Deployment failed - No Rollback version available</th></table>","FAILED")
               exit(1)

#Lets trigger the Files Packaging deployment
if (options.fp):
     #print len(sys.argv)
     printOK("Proceeding with the Files Packaging deployment.. ")
     if not len(sys.argv) == 13:
          print 'usage: script <applicationName> <applicationProcessName> <environmentName> <username> <password> <version> <componentname> <changenumber> <recipient> <install applications> <install stagename> --app'
          print "please pass needed parameter values to do application deployment"
          exit(1)
     
     props = { "Install: \""+componentname+"\"/applications":  sys.argv[10],
            "Install: \""+componentname+"\"/stage":  sys.argv[11]
          }
     json_data = prepare_json(applicationName,applicationProcessName,environmentName,version,componentname,changenumber,recipient,props)
     #print json_data
     DeploymentStatus = deploymentStatus(json_data)
     if DeploymentStatus:
          printSuccess("Deployment successfully completed.. ")
          emailNotification(recipient,applicationName,componentname,environmentName,version,"<table style='background-color:#4CAF50; color:white; font-family: Arial;'><th>Successful Deployment</th></table>","SUCCESS")
          exit(0)
     else:
          printBad("Deployment failed..")
          emailNotification(recipient,applicationName,componentname,environmentName,version,"<table style='background-color:#f44336; color:white; font-family: Arial;'><th>Deployment failed - No Rollback attempted</th></table>","FAILED")
          exit(1)



.html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
	<style type="text/css">
		 a, p a { color: #002d72; text-decoration: underline; }
		 p { font-size:10pt;line-height:14pt;font-family:Arial, Helvetica, sans-serif; color: #53565a margin: 0 0 14px 0; padding: 0 0 0 0; }
         .label {
    color: white;
    padding: 8px;
    font-family: Arial;
}
.success {
background-color: #4CAF50;
width: 450px
}
.danger {
background-color: #f44336;
width: 450px
} /* Red */ 
	</style>
<title>Citi</title>
</head>
<body style="margin-top:0px;margin-bottom:0px;margin-right:0px;margin-left:0px;padding-top:0px;padding-bottom:0px;padding-right:0px;padding-left:0px;color:#000;background-color:#ffffff;font-family:Arial, Helvetica, sans-serif;" >
<div id="bodyImposter" style="color:#000;background-color:#ffffff;width:100%;margin-top:0px;margin-bottom:0px;margin-right:0px;margin-left:0px;padding-top:0px;padding-bottom:0px;padding-right:0px;padding-left:0px;text-align:center;" >
<table cellspacing="0" cellpadding="0" border="0" width="650" style="color:#53565a;background-color:#ffffff;margin-top:0;margin-bottom:0px;margin-right:auto;margin-left:auto;border-collapse:collapse;" >
	<tr style="border-collapse:collapse;" >
	  <td height="70" colspan="3" align="left" valign="top" style="border-collapse:collapse;font-size:1px;line-height:1px;padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;"><img src="cid:image1" width="650" height="70" alt="Citi" /></td>
    </tr>
	<tr style="border-collapse:collapse;" >
		  <td height="17" colspan="3" align="left" valign="top" style="border-collapse:collapse;font-size:1px;line-height:1px;">&nbsp;</td>
	  </tr>
		<tr style="border-collapse:collapse;" >
			<td width="35" align="left" valign="top" style="border-collapse:collapse;width:35px;">&nbsp;</td>
	    <td width="580" height="20" align="left" valign="top" style="border-collapse:collapse;font-size:10pt;line-height:14pt;font-family:Arial, Helvetica, sans-serif;color:#53565a;width:580px;"><table width="580" border="0" cellspacing="0" cellpadding="0">
	      <tr>
	        <td width="55" align="left" valign="top" style="border-collapse:collapse;font-size:10pt;line-height:14pt;font-family:Arial, Helvetica, sans-serif;color:#53565a;"><strong>To:</strong></td>
	        <td width="525" align="left" valign="top" style="border-collapse:collapse;font-size:10pt;line-height:14pt;font-family:Arial, Helvetica, sans-serif;color:#53565a;">$$Recipeint</td>
          </tr>
	      <tr>
	        <td align="left" valign="top" style="border-collapse:collapse;font-size:10pt;line-height:14pt;font-family:Arial, Helvetica, sans-serif;color:#53565a;"><strong>From:</strong></td>
	        <td align="left" valign="top" style="border-collapse:collapse;font-size:10pt;line-height:14pt;font-family:Arial, Helvetica, sans-serif;color:#53565a;">$$Sender</td>
          </tr>
	      <tr>
	        <td align="left" valign="top" style="border-collapse:collapse;font-size:10pt;line-height:14pt;font-family:Arial, Helvetica, sans-serif;color:#53565a;"><strong>Date:</strong></td>
	        <td align="left" valign="top" style="border-collapse:collapse;font-size:10pt;line-height:14pt;font-family:Arial, Helvetica, sans-serif;color:#53565a;">$$Date</td>
          </tr>
	      <tr>
	        <td align="left" valign="top" style="border-collapse:collapse;font-size:10pt;line-height:14pt;font-family:Arial, Helvetica, sans-serif;color:#53565a;"><strong>Re:</strong></td>
	        <td align="left" valign="top" style="border-collapse:collapse;font-size:10pt;line-height:14pt;font-family:Arial, Helvetica, sans-serif;color:#53565a;">$$Subject</td>
          </tr>
	      </table></td>
			<td width="35" align="left" valign="top" style="border-collapse:collapse;width:35px;">&nbsp;</td>
      </tr>
	  <tr style="border-collapse:collapse;" >
		  <td height="20" colspan="3" align="left" valign="top" style="border-collapse:collapse;font-size:1px;line-height:1px;">&nbsp;</td>
	  </tr>
      <tr style="border-collapse:collapse;" >
	    <td width="35" height="1" align="left" valign="top" style="border-collapse:collapse;font-size:1px;line-height:1px;height:1px;"></td>
	    <td width="580" height="1" align="left" valign="top" style="border-collapse:collapse;font-size:1px;line-height:1px;height:1px;"><hr/></td>
	    <td width="35" height="1" align="left" valign="top" style="border-collapse:collapse;font-size:1px;line-height:1px;height:1px;"></td>
    </tr>
    <tr style="border-collapse:collapse;" >
		  <td height="15" colspan="3" align="left" valign="top" style="border-collapse:collapse;font-size:1px;line-height:1px;">&nbsp;</td>
    </tr>
	  <tr style="border-collapse:collapse;" >
	    <td width="35" align="left" valign="top" style="border-collapse:collapse;">&nbsp;</td>
	    <td width="580" align="left" valign="top" style="border-collapse:collapse;"><p>Dear Team,</p>
	      <p>TTS Teamcity performed automated deployment for <strong>$$application</strong> in <strong>$$environment</strong> environment</p>
				<p>The uDeploy version used for the deployment is <strong>$$version</strong>. Below is the status of the deployment</p>
							$$status
				<p>This is an automated email from the build system. If there are any application issues post deployment kindly check with the respective application team before raising a ticket to TTS Build integration, for teamcity issues please contact our support group</p>			
	      <br />
         
	      <p><strong>TTS Build Integration Support</strong><br />
	        Treasury Trade Services<br />
	        </p>
	      <p>Contact Us<br />
					Service Now Ticket ICG NA OP US BUILDINTEGRATION-INC<br />
					Change Group ICG NA OP US BUILDINTEGRATION-CHG<br />				
	        Team DL *CTS GLOBAL Build Integration Support</p>
        <a href="https://collaborate.citi.net/groups/ci-cd-tts-ste"><p>Post your queries, visit our citi collaborate</p></a></td>
	    <td width="35" align="left" valign="top" style="border-collapse:collapse;">&nbsp;</td>
    </tr>
	  <tr style="border-collapse:collapse;" >
	    <td height="55" colspan="3" align="left" valign="top" style="border-collapse:collapse;font-size:1px;line-height:1px;">&nbsp;</td>
    </tr>
    </table>
</div>
</body>
</html>

